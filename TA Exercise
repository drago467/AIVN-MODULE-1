{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNJ9NCrax86alswR4Wp0hzh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/drago467/AIVN-MODULE-1/blob/main/TA%20Exercise\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "ZsIlhuWRfyvc"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = torch.Tensor([1, 2, 3])\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RsQlaNkwjPeY",
        "outputId": "288a8f37-291b-422e-ee39-2c5a60668a88"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([1., 2., 3.])"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "softmax_function = nn.Softmax(dim=0)\n",
        "output = softmax_function(data)\n",
        "output"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Gp11SdejXUA",
        "outputId": "4a0fa0aa-cdd0-4f3b-8562-11668355ceb9"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([0.0900, 0.2447, 0.6652])"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class MySoftmax(nn.Module):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "\n",
        "  def forward(self, x):\n",
        "    x_exp = torch.exp(x)\n",
        "    total = x_exp.sum(0, keepdim = True)\n",
        "    return x_exp / total\n",
        "\n",
        "my_softmax = MySoftmax()\n",
        "output = my_softmax(data)\n",
        "output"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u_3W86iCju5M",
        "outputId": "9f6f709a-12ab-4ebd-8afd-9c75a21a87ce"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([0.0900, 0.2447, 0.6652])"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = torch.Tensor([1, 2, 30000000])\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N8SI0LORl7YR",
        "outputId": "7522ae18-5fb9-4f51-a395-cee0743368d7"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([1.0000e+00, 2.0000e+00, 3.0000e+07])"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class StableSoftmax(nn.Module):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "\n",
        "  def forward(self, x):\n",
        "    c = torch.max(x, dim = 0)\n",
        "    x_exp = torch.exp(x - c.values)\n",
        "    total = x_exp.sum(0, keepdims = True)\n",
        "    return x_exp / total\n",
        "\n",
        "stable_softmax = StableSoftmax()\n",
        "output = stable_softmax(data)\n",
        "output"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CKjA8trZnv0Q",
        "outputId": "3d187aa7-1008-4ffe-a2c1-777beb5f4f22"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([0., 0., 1.])"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from abc import ABC, abstractmethod\n",
        "class Person(ABC):\n",
        "  def __init__(self, name, yob):\n",
        "    self.name = name\n",
        "    self.yob = yob\n",
        "\n",
        "  @abstractmethod\n",
        "  def describe(self):\n",
        "    pass\n",
        "\n",
        "  def get_yob(self):\n",
        "    return self.yob\n",
        "\n",
        "class Student(Person):\n",
        "  def __init__(self, name, yob, grade):\n",
        "    super().__init__(name, yob)\n",
        "    self.__grade = grade\n",
        "\n",
        "  def describe(self):\n",
        "    print(f'Student - Name: {self.name} - YoB: {self.yob} - Grade: {self.__grade}')\n",
        "\n",
        "student1 = Student('Tuan', 2004, 10)\n",
        "student1.describe()\n",
        "\n",
        "class Doctor(Person):\n",
        "  def __init__(self, name, yob, specialist):\n",
        "    super().__init__(name, yob)\n",
        "    self.__specialist = specialist\n",
        "\n",
        "  def describe(self):\n",
        "    print(f'Student - Name: {self.name} - YoB: {self.yob} - Specialist: {self.__specialist}')\n",
        "\n",
        "doctor1 = Doctor('Tuan', 2003, 'Medicine')\n",
        "doctor1.describe()\n",
        "\n",
        "class Teacher(Person):\n",
        "  def __init__(self, name, yob, subject):\n",
        "    super().__init__(name, yob)\n",
        "    self.__subject = subject\n",
        "\n",
        "  def describe(self):\n",
        "    print(f'Student - Name: {self.name} - YoB: {self.yob} - Subject: {self.__subject}')\n",
        "\n",
        "teacher1 = Teacher('Tuan', 2002, 'Math')\n",
        "teacher1.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4zSLWuQUrkO0",
        "outputId": "a3a51a16-49e8-4b9f-a348-600e0f6bbb8e"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Student - Name: Tuan - YoB: 2004 - Grade: 10\n",
            "Student - Name: Tuan - YoB: 2003 - Specialist: Medicine\n",
            "Student - Name: Tuan - YoB: 2002 - Subject: Math\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from itertools import count\n",
        "class Ward:\n",
        "  def __init__(self, name):\n",
        "    self.__name = name\n",
        "    self.__list_people = list()\n",
        "\n",
        "  def add_person(self, person: Person):\n",
        "    self.__list_people.append(person)\n",
        "\n",
        "  def describe_people(self):\n",
        "    for person in self.__list_people:\n",
        "      person.describe()\n",
        "\n",
        "  def count_doctor(self):\n",
        "    counter = 0\n",
        "    for p in self.__list_people:\n",
        "      if isinstance(p, Doctor):\n",
        "        counter += 1\n",
        "    return counter\n",
        "\n",
        "  def sort_yob(self):\n",
        "    self.__list_people.sort(key = lambda x: x.get_yob(), reverse=True)\n",
        "\n",
        "  def compute_average(self):\n",
        "    total = 0\n",
        "    for p in self.__list_people:\n",
        "      total += p.get_yob()\n",
        "    return total / len(self.__list_people)\n"
      ],
      "metadata": {
        "id": "I_ybbXReuY5V"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ward1 = Ward('Ward 1')\n",
        "ward1.add_person(student1)\n",
        "ward1.add_person(doctor1)\n",
        "ward1.add_person(teacher1)\n",
        "ward1.describe_people()\n",
        "print(ward1.count_doctor())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rZ0GnYgJ5X2e",
        "outputId": "6c1926c1-ebb1-4f7f-bb13-ddc8584f4faf"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Student - Name: Tuan - YoB: 2004 - Grade: 10\n",
            "Student - Name: Tuan - YoB: 2003 - Specialist: Medicine\n",
            "Student - Name: Tuan - YoB: 2002 - Subject: Math\n",
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ward1.sort_yob()\n",
        "ward1.describe_people()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q44qDfjI0tC2",
        "outputId": "cba1761d-4c7d-49d6-f4b5-2e513e7e8564"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Student - Name: Tuan - YoB: 2004 - Grade: 10\n",
            "Student - Name: Tuan - YoB: 2003 - Specialist: Medicine\n",
            "Student - Name: Tuan - YoB: 2002 - Subject: Math\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "BxXruGUI4hx8"
      },
      "execution_count": 51,
      "outputs": []
    }
  ]
}